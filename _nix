#compdef nix
#autoload

# Most information is extractable from `nix --help` and `nix command --help`

# There's four different types of options and arguments which is passed to _arguments:
#
# 1. The main commands which we get from nix --help
#
# 2. The common options which are hardcoded for the moment
#
# 3. The regular arguments for the active command. The number and types of these
# arguments are taken from the "Usage:" line of `nix command --help`, the
# actions and descriptions are then looked up in `$completors[type]`
#
# 4. The options for the active command. These are taken from the "Flags:"
# section of `nix command --help`, and the option arguments are handled in the
# same way as in 3.

# Set command_name and ensure access to eg. _nix_attr_paths
local command_name=nix
_nix-common-options

local -a common_options
common_options=("(--debug)"--debug"[enable debug output]"
                "(-h --help)"{-h,--help}"[show usage information]"
                "(--help-config)"--help-config"[show configuration options]"
                "*--builders[The machine to build on]:Machine eg. 'root@mac x86_64-darwin': "
                "--store[Select a nix store]:Store:_nix_store"
                "*--option[set a Nix configuration option (overriding nix.conf)]:Option:_extract_nix_options:Value:_extract_nix_value_description"
                "(--quiet)"--quiet"[decrease verbosity level]"
                "*"{-v,--verbose}"[increase verbosity level]"
                "(--version)"--version"[show version information]")

local -a main_commands
() {
    local IFS=$'\n'
    # Extract the commands with descriptions
    # like ('command:some description' 'run:run some stuff')
    main_commands=($(nix --help | sed -E \
                                      -e '/^Available commands/,/^$/!d' \
                                      -e '/^Available commands/d' \
                                      -e '/^$/d' \
                                      -e 's=^ +([0-9a-z-]*) +(.*)$=\1:\2='))
}

function _describe_nix_commands {
    _describe -t main_commands "Command" main_commands
}

function _extract_nix_options {
    local IFS=$'\n'
    local -a nix_options
    nix_options=($(nix --help-config | sed -E \
                                 -e '/^$/,/^$/!d' \
                                 -e '/^$/d' \
                                 -e 's=^ +([0-9a-z-]*) +(.*)$=\1:\2='))
    _describe -t nix_options "Option" nix_options
}

function _extract_nix_value_description {
    local OPTION=$words[$(($CURRENT - 1))]
    local description=$(nix --help-config | sed -E \
                                                -e /\^\ \ ${OPTION}\ /\!d \
                                                -e "s=^  ${OPTION} +==")
    _message $description
}

function _nix_store {
    _alternative \
        'file:Use a chroot store:_directories' \
        'local:Use /nix/store:(local)' \
        'remote:Go via the Nix daemon:(remote)' \
        'https:HTTPS:(https://)' \
        'cache:Local binary cache:(file://)' \
        's3:S3 binary cache:(s3://)' \
        'ssh:Nix store over ssh:(ssh://)' \
}

local -A completors
# The different argument completors that can be used
completors[INSTALLABLES]="*:Installables: _nix_attr_paths"
completors[INSTALLABLE]=":Installable: _nix_attr_paths"
completors[PACKAGE]=":The package we're checking depencies of: _nix_attr_paths"
completors[DEPENDENCY]=":The dependency: _nix_attr_paths"
completors[PATH]=":Path:_files"
completors[PATHS]="*:Path:_files"
completors[NAR]=":Nar:_files"
completors[REGEX]="::Regex to search for: "
completors[STRINGS]="*:Hash: "

local -A option_completors
# Completors that are used for options
option_completors[NAME]=":Argument name: "
option_completors[STORE-URI]=":Store uri:_nix_store"
option_completors[FILES]="*:Path:_files"
option_completors[COMMAND]=":Path:_command_names"
option_completors[ARGS]="*:Arguments to command: "
option_completors[TYPE]=":Hash type:(md5 sha1 sha256 sha512)"
option_completors[EXPR]=":Expression argument: "
option_completors[STRING]=":String argument: "
option_completors[PATH]=":Shadow NIX_PATH, eg. nixpkgs=git\://github.com/NixOS/nixpkgs: "

# Add commands to an associative array for easy lookup
local -A command_lookup
local command_description
for command_description in $main_commands; {
    local command=${command_description%%\:*}
    command_lookup[$command]=1
}

local -a command_options=()
local -a command_arguments=()
# Setup the correct command_arguments and command_options depending on which
# command we've typed
local word
for word in $words; do

    # Check if we're in a valid command
    if [[ $command_lookup[$word] == 1 ]]; then
        # Extract an array describing the possible arguments to the command eg.
        # (NAR PATH) for cat-nar or (INSTALLABLES) for run
        local -a args=($(nix $word --help | sed -E \
                                          -e '2,$d' \
                                          -e 's=^Usage.*<FLAGS>==' \
                                          -e 's=\.|\?|<|>==g'))
        # And add the corresponding completors
        local arg
        for arg in $args; do
            command_arguments+=($completors[$arg])
        done

        # Extract the lines containing the option descriptions
        local -a option_descriptions
        (){
            local IFS=$'\n'
            option_descriptions=($(nix $word --help | sed -E \
                                                        -e '/^Flags:/,/^$/!d' \
                                                        -e "/^Flags:/d" \
                                                        -e '/^$/d'))
        }

        local option_description
        local option
        for option_description in $option_descriptions; do

            # Extract the description by stripping everything up to the the last
            # two consecutive spaces
            local description=${option_description/(*  )/}
            # Remove the description from the help line
            local option_spec=${option_description%$description}

            # Extract the options by stripping everything starting at '<' (and ',')
            local -a option_group=(${=option_spec//(<*|,)/})
            # Extract any arguments, by stripping the options (and <|>)
            local -a option_args=(${=option_spec//(*$option_group[${#option_group}]|<|>)/})

            local ACTIONS=""
            for arg in $option_args; do
                local action=$option_completors[$arg]
                if [[ -z $action ]]; then
                    # Fall back on description and arg if there's no known completor
                    action=":$description\: $arg: "
                fi
                ACTIONS+=$action
            done

            for option in $option_group; do
                # Handle `run --keep/--unset` manually as they can be repeated
                if [[ $word == run && -z ${option:#(-k|--keep|-u|--unset)} ]]; then
                    command_options+=("*${option}[$description]:Environment Variable:_vars")
                else
                    # Some options can be provided multiple times, but there's no way
                    # to automatically check, so we exclude them by default
                    command_options+=("($option_group)"$option"[$description]"$ACTIONS)
                fi
            done
        done

        break
    fi
done

_arguments -s \
           :Command:_describe_nix_commands \
           $command_arguments \
           $common_options \
           $command_options
