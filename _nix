#compdef nix
#autoload

local command_name=nix

_nix-common-options

# print $command_lookup >> ~/log/nix

local -a main_commands
() {
    local IFS=$'\n'
    main_commands=($(nix --help | sed -E \
                                      -e '/^Available commands/,/^$/!d' \
                                      -e '/^Available commands/d' \
                                      -e '/^$/d' \
                                      -e 's=^ +([0-9a-z-]*) +(.*)$=\1:\2='
                   ))
}

function _describe_commands {
    _describe -t main_commands "Command" main_commands
}

local -A command_lookup
for command_description in $main_commands; {
    local command=${command_description%%\:*}
    command_lookup[$command]=1
}


function _extract_options {
    local IFS=$'\n'
    local -a main_commands
    main_commands=($(nix --help-config | sed -E \
                                 -e '/^$/,/^$/!d' \
                                 -e '/^$/d' \
                                 -e 's=^ +([0-9a-z-]*) +(.*)$=\1:\2='
              ))
    _describe -t main_commands "Option" main_commands
}

function _extract_value_description {
    # set -x
    local OPTION=$words[$(($CURRENT - 1))]
    local description=$(nix --help-config | sed -E \
                                                -e /\^\ \ ${OPTION}/\!d \
                                                -e "s=  ${OPTION} +=="
          )
    print $description >> ~/log/nix
    _message $description
}

local -a common_flags
common_flags=("(--debug)"--debug"[enable debug output]"
              "(-h --help)"{-h,--help}"[show usage information]"
              "(--help-config)"--help-config"[show configuration options]"
              "(--option)"--option"[set a Nix configuration option (overriding nix.conf)]:Option:_extract_options:Value:_extract_value_description"
              "(--quiet)"--quiet"[decrease verbosity level]"
              "(-v --verbose)"{-v,--verbose}"[increase verbosity level]"
              "(--version)"--version"[show version information]"
)

function extract_common_flags {
    nix --help | sed -E \
                        -e "/^Common flags:/,/^$/\!d" \
                        -e "/^Common flags:/d" \
                        -e '/^$/d' \
                        -e 's=^ +(-[0-9a-zA-Z-]*),? ?(--[0-9a-z-]*)? (<[A-Z]+>)? ?(<[A-Z]+>)? +(.*$)=\1 \2 .\3. .\4. "\5"='
}

function extract_flags {
    nix $1 --help | sed -E \
                        -e "/^Flags:/,/^$/\!d" \
                        -e "/^Flags:/d" \
                        -e '/^$/d' \
                        -e 's=^ +(-[0-9a-zA-Z-]*),? ?(--[0-9a-z-]*)? (<[A-Z]+>)? ?(<[A-Z]+>)? +(.*$)=\1 \2 .\3. .\4. "\5"='
}

local -A COMPLETORS
# The different argument completors that can be used
COMPLETORS[INSTALLABLES]="*:Installables: _nix_attr_paths"
COMPLETORS[INSTALLABLE]=":Installable: _nix_attr_paths"
COMPLETORS[PATH]=":Path:_files"
COMPLETORS[PATHS]="*:Path:_files"
COMPLETORS[NAR]=":Nar:_files"

local -a command_flags
local -a command_arguments=()
for word in $words; do

    if [[ $command_lookup[$word] == "1" ]]; then
        # Extract an array like eg. (NAR PATH) or (INSTALLABLES)
        local -a args=($(nix $word --help | sed -E \
                                          -e '2,$d' \
                                          -e 's=\.\.\.==g' \
                                          -e 's=^Usage.*<FLAGS>==' \
                                          -e 's=<|>==g'
        ))
        # And add the corresponding completor
        for arg in $args; do
            command_arguments+=($COMPLETORS[$arg])
        done
        break
    fi
done

print $command_arguments >> ~/log/nix

_arguments -s \
           :'Command':_describe_commands \
           $command_arguments \
           $common_flags \
           # $command_flags

